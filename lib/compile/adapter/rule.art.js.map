{"version":3,"sources":["../../../src/compile/adapter/rule.art.js"],"names":["artRule","test","use","match","raw","close","code","compiler","options","esTokens","getEsTokens","values","map","token","value","result","group","output","key","shift","warn","oldSyntax","newSyntax","console","filename","line","start","join","trim","indexIf","indexOf","splice","_split","object","index","v3split","reduce","type","push","length","g","accumulator","filter","name","unshift","current","lastToken","punctuator","esToken","module","exports"],"mappings":"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","file":"rule.art.js","sourcesContent":["/**\n * 简洁模板语法规则\n */\nconst artRule = {\n    test: /{{([@#]?)[ \\t]*(\\/?)([\\w\\W]*?)[ \\t]*}}/,\n    use: function(match, raw, close, code) {\n        const compiler = this;\n        const options = compiler.options;\n        const esTokens = compiler.getEsTokens(code);\n        const values = esTokens.map(token => token.value);\n        const result = {};\n\n        let group;\n        let output = raw ? 'raw' : false;\n        let key = close + values.shift();\n\n        // 旧版语法升级提示\n        const warn = (oldSyntax, newSyntax) => {\n            console.warn(\n                `${options.filename || 'anonymous'}:${match.line + 1}:${match.start + 1}\\n` +\n                    `Template upgrade: {{${oldSyntax}}} -> {{${newSyntax}}}`\n            );\n        };\n\n        // v3 compat: #value\n        if (raw === '#') {\n            warn('#value', '@value');\n        }\n\n        switch (key) {\n            case 'set':\n                code = `var ${values.join('').trim()}`;\n                break;\n\n            case 'if':\n                code = `if(${values.join('').trim()}){`;\n\n                break;\n\n            case 'else':\n                const indexIf = values.indexOf('if');\n\n                if (~indexIf) {\n                    values.splice(0, indexIf + 1);\n                    code = `}else if(${values.join('').trim()}){`;\n                } else {\n                    code = `}else{`;\n                }\n\n                break;\n\n            case '/if':\n                code = '}';\n                break;\n\n            case 'each':\n                group = artRule._split(esTokens);\n                group.shift();\n\n                if (group[1] === 'as') {\n                    // ... v3 compat ...\n                    warn('each object as value index', 'each object value index');\n                    group.splice(1, 1);\n                }\n\n                const object = group[0] || '$data';\n                const value = group[1] || '$value';\n                const index = group[2] || '$index';\n\n                code = `$each(${object},function(${value},${index}){`;\n\n                break;\n\n            case '/each':\n                code = '})';\n                break;\n\n            case 'block':\n                group = artRule._split(esTokens);\n                group.shift();\n                code = `block(${group.join(',').trim()},function(){`;\n                break;\n\n            case '/block':\n                code = '})';\n                break;\n\n            case 'echo':\n                key = 'print';\n                warn('echo value', 'value');\n            case 'print':\n            case 'include':\n            case 'extend':\n                if (\n                    values\n                        .join('')\n                        .trim()\n                        .indexOf('(') !== 0\n                ) {\n                    // 执行函数省略 `()` 与 `,`\n                    group = artRule._split(esTokens);\n                    group.shift();\n                    code = `${key}(${group.join(',')})`;\n                    break;\n                }\n\n            default:\n                if (~values.indexOf('|')) {\n                    const v3split = ':'; // ... v3 compat ...\n\n                    // 将过滤器解析成二维数组\n                    const group = esTokens\n                        .reduce((group, token) => {\n                            const { value, type } = token;\n                            if (value === '|') {\n                                group.push([]);\n                            } else if (type !== `whitespace` && type !== `comment`) {\n                                if (!group.length) {\n                                    group.push([]);\n                                }\n                                if (value === v3split && group[group.length - 1].length === 1) {\n                                    warn('value | filter: argv', 'value | filter argv');\n                                } else {\n                                    group[group.length - 1].push(token);\n                                }\n                            }\n                            return group;\n                        }, [])\n                        .map(g => artRule._split(g));\n\n                    // 将过滤器管道化\n                    code = group.reduce(\n                        (accumulator, filter) => {\n                            const name = filter.shift();\n                            filter.unshift(accumulator);\n\n                            return `$imports.${name}(${filter.join(',')})`;\n                        },\n                        group\n                            .shift()\n                            .join(` `)\n                            .trim()\n                    );\n                }\n\n                output = output || 'escape';\n\n                break;\n        }\n\n        result.code = code;\n        result.output = output;\n\n        return result;\n    },\n\n    // 将多个 javascript 表达式拆分成组\n    // 支持基本运算、三元表达式、取值、运行函数，不支持 `typeof value` 操作\n    // 只支持 string、number、boolean、null、undefined 这几种类型声明，不支持 function、object、array\n    _split: esTokens => {\n        esTokens = esTokens.filter(({ type }) => {\n            return type !== `whitespace` && type !== `comment`;\n        });\n\n        let current = 0;\n        let lastToken = esTokens.shift();\n        const punctuator = `punctuator`;\n        const close = /\\]|\\)/;\n        const group = [[lastToken]];\n\n        while (current < esTokens.length) {\n            const esToken = esTokens[current];\n\n            if (\n                esToken.type === punctuator ||\n                (lastToken.type === punctuator && !close.test(lastToken.value))\n            ) {\n                group[group.length - 1].push(esToken);\n            } else {\n                group.push([esToken]);\n            }\n\n            lastToken = esToken;\n\n            current++;\n        }\n\n        return group.map(g => g.map(g => g.value).join(``));\n    }\n};\n\nmodule.exports = artRule;\n"]}
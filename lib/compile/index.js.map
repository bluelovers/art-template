{"version":3,"sources":["../../src/compile/index.js"],"names":["Compiler","require","defaults","TemplateError","debugRender","error","options","onerror","render","mappings","sourcesContent","compile","source","$extend","debug","cache","minimize","compileDebug","filename","resolveFilename","caches","get","loader","e","name","path","message","stack","bail","fn","compiler","build","data","blocks","replace","toString","set","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const Compiler = require('./compiler');\nconst defaults = require('./defaults');\nconst TemplateError = require('./error');\n\nconst debugRender = (error, options) => {\n    options.onerror(error, options);\n    const render = () => `{Template Error}`;\n    render.mappings = [];\n    render.sourcesContent = [];\n    return render;\n};\n\n/**\n * 编译模版\n * @param {string|Object} source   模板内容\n * @param {?Object}       options  编译选项\n * @return {function}\n */\nconst compile = (source, options = {}) => {\n    if (typeof source !== 'string') {\n        options = source;\n    } else {\n        options.source = source;\n    }\n\n    // 合并默认配置\n    options = defaults.$extend(options);\n    source = options.source;\n\n    // debug 模式\n    /* istanbul ignore if */\n    if (options.debug === true) {\n        options.cache = false;\n        options.minimize = false;\n        options.compileDebug = true;\n    }\n\n    if (options.compileDebug) {\n        options.minimize = false;\n    }\n\n    // 转换成绝对路径\n    if (options.filename) {\n        options.filename = options.resolveFilename(options.filename, options);\n    }\n\n    const filename = options.filename;\n    const cache = options.cache;\n    const caches = options.caches;\n\n    // 匹配缓存\n    if (cache && filename) {\n        const render = caches.get(filename);\n        if (render) {\n            return render;\n        }\n    }\n\n    // 加载外部模板\n    if (!source) {\n        try {\n            source = options.loader(filename, options);\n            options.source = source;\n        } catch (e) {\n            const error = new TemplateError({\n                name: 'CompileError',\n                path: filename,\n                message: `template not found: ${e.message}`,\n                stack: e.stack\n            });\n\n            if (options.bail) {\n                throw error;\n            } else {\n                return debugRender(error, options);\n            }\n        }\n    }\n\n    let fn;\n    const compiler = new Compiler(options);\n\n    try {\n        fn = compiler.build();\n    } catch (error) {\n        error = new TemplateError(error);\n        if (options.bail) {\n            throw error;\n        } else {\n            return debugRender(error, options);\n        }\n    }\n\n    const render = (data, blocks) => {\n        try {\n            return fn(data, blocks).replace(/^(?:\\r\\n|\\n|\\r)/, '');\n        } catch (error) {\n            // 运行时出错以调试模式重载\n            if (!options.compileDebug) {\n                options.cache = false;\n                options.compileDebug = true;\n                return compile(options)(data, blocks);\n            }\n\n            error = new TemplateError(error);\n\n            if (options.bail) {\n                throw error;\n            } else {\n                return debugRender(error, options)();\n            }\n        }\n    };\n\n    render.mappings = fn.mappings;\n    render.sourcesContent = fn.sourcesContent;\n    render.toString = () => fn.toString();\n\n    if (cache && filename) {\n        caches.set(filename, render);\n    }\n\n    return render;\n};\n\ncompile.Compiler = Compiler;\n\nmodule.exports = compile;\n"]}
{"version":3,"sources":["../../src/compile/compiler.js"],"names":["esTokenizer","require","tplTokenizer","DATA","IMPORTS","ESCAPE","EACH","PRINT","INCLUDE","EXTEND","BLOCK","OUT","LINE","BLOCKS","SLICE","FROM","OPTIONS","has","object","key","Object","hasOwnProperty","call","stringify","JSON","Compiler","options","source","minimize","htmlMinifier","stacks","context","scripts","CONTEXT_MAP","ignore","internal","dependencies","importContext","compileDebug","error","getTplTokens","rules","forEach","tokens","type","TYPE_STRING","parseString","parseExpression","esTokens","filter","esToken","value","map","tooken","name","imports","contextMap","indexOf","push","tplToken","code","script","output","escape","TYPE_RAW","getEsTokens","getVariables","index","length","test","replace","Function","e","filename","mappings","extendMode","offsetLine","mapping","line","start","node","generated","column","original","split","trim","join","TYPE_EXPRESSION","renderCode","result","sourcesContent","current","checkExpression","path","message","stack","CONSTS","module","exports"],"mappings":"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","file":"compiler.js","sourcesContent":["const esTokenizer = require('./es-tokenizer');\nconst tplTokenizer = require('./tpl-tokenizer');\n\n/** 传递给模板的数据引用 */\nconst DATA = `$data`;\n\n/** 外部导入的所有全局变量引用 */\nconst IMPORTS = `$imports`;\n\n/**  $imports.$escape */\nconst ESCAPE = `$escape`;\n\n/**  $imports.$each */\nconst EACH = `$each`;\n\n/** 文本输出函数 */\nconst PRINT = `print`;\n\n/** 包含子模板函数 */\nconst INCLUDE = `include`;\n\n/** 继承布局模板函数 */\nconst EXTEND = `extend`;\n\n/** “模板块”读写函数 */\nconst BLOCK = `block`;\n\n/** 字符串拼接变量 */\nconst OUT = `$$out`;\n\n/** 运行时逐行调试记录变量 [line, start, source] */\nconst LINE = `$$line`;\n\n/** 所有“模板块”变量 */\nconst BLOCKS = `$$blocks`;\n\n/** 截取模版输出“流”的函数 */\nconst SLICE = `$$slice`;\n\n/** 继承的布局模板的文件地址变量 */\nconst FROM = `$$from`;\n\n/** 编译设置变量 */\nconst OPTIONS = `$$options`;\n\nconst has = (object, key) => Object.hasOwnProperty.call(object, key);\nconst stringify = JSON.stringify;\n\nclass Compiler {\n    /**\n     * 模板编译器\n     * @param   {Object}    options\n     */\n    constructor(options) {\n        let source = options.source;\n        const minimize = options.minimize;\n        const htmlMinifier = options.htmlMinifier;\n\n        // 编译选项\n        this.options = options;\n\n        // 所有语句堆栈\n        this.stacks = [];\n\n        // 运行时注入的上下文\n        this.context = [];\n\n        // 模板语句编译后的代码\n        this.scripts = [];\n\n        // context map\n        this.CONTEXT_MAP = {};\n\n        // 忽略的变量名单\n        this.ignore = [DATA, IMPORTS, OPTIONS, ...options.ignore];\n\n        // 按需编译到模板渲染函数的内置变量\n        this.internal = {\n            [OUT]: `''`,\n            [LINE]: `[0,0]`,\n            [BLOCKS]: `arguments[1]||{}`,\n            [FROM]: `null`,\n            [PRINT]: `function(){var s=''.concat.apply('',arguments);${OUT}+=s;return s}`,\n            [INCLUDE]: `function(src,data){var s=${OPTIONS}.include(src,data||${DATA},arguments[2]||${BLOCKS},${OPTIONS});${OUT}+=s;return s}`,\n            [EXTEND]: `function(from){${FROM}=from}`,\n            [SLICE]: `function(c,p,s){p=${OUT};${OUT}='';c();s=${OUT};${OUT}=p+s;return s}`,\n            [BLOCK]: `function(){var a=arguments,s;if(typeof a[0]==='function'){return ${SLICE}(a[0])}else if(${FROM}){if(!${BLOCKS}[a[0]]){${BLOCKS}[a[0]]=${SLICE}(a[1])}else{${OUT}+=${BLOCKS}[a[0]]}}else{s=${BLOCKS}[a[0]];if(typeof s==='string'){${OUT}+=s}else{s=${SLICE}(a[1])}return s}}`\n        };\n\n        // 内置函数依赖关系声明\n        this.dependencies = {\n            [PRINT]: [OUT],\n            [INCLUDE]: [OUT, OPTIONS, DATA, BLOCKS],\n            [EXTEND]: [FROM, /*[*/ INCLUDE /*]*/],\n            [BLOCK]: [SLICE, FROM, OUT, BLOCKS]\n        };\n\n        this.importContext(OUT);\n\n        if (options.compileDebug) {\n            this.importContext(LINE);\n        }\n\n        if (minimize) {\n            try {\n                source = htmlMinifier(source, options);\n            } catch (error) {}\n        }\n\n        this.source = source;\n        this.getTplTokens(source, options.rules, this).forEach(tokens => {\n            if (tokens.type === tplTokenizer.TYPE_STRING) {\n                this.parseString(tokens);\n            } else {\n                this.parseExpression(tokens);\n            }\n        });\n    }\n\n    /**\n     * 将模板代码转换成 tplToken 数组\n     * @param   {string} source\n     * @return  {Object[]}\n     */\n    getTplTokens(...args) {\n        return tplTokenizer(...args);\n    }\n\n    /**\n     * 将模板表达式转换成 esToken 数组\n     * @param   {string} source\n     * @return  {Object[]}\n     */\n    getEsTokens(source) {\n        return esTokenizer(source);\n    }\n\n    /**\n     * 获取变量列表\n     * @param {Object[]} esTokens\n     * @return {string[]}\n     */\n    getVariables(esTokens) {\n        let ignore = false;\n        return esTokens\n            .filter(esToken => {\n                return esToken.type !== `whitespace` && esToken.type !== `comment`;\n            })\n            .filter(esToken => {\n                if (esToken.type === `name` && !ignore) {\n                    return true;\n                }\n\n                ignore = esToken.type === `punctuator` && esToken.value === `.`;\n\n                return false;\n            })\n            .map(tooken => tooken.value);\n    }\n\n    /**\n     * 导入模板上下文\n     * @param {string} name\n     */\n    importContext(name) {\n        let value = ``;\n        const internal = this.internal;\n        const dependencies = this.dependencies;\n        const ignore = this.ignore;\n        const context = this.context;\n        const options = this.options;\n        const imports = options.imports;\n        const contextMap = this.CONTEXT_MAP;\n\n        if (!has(contextMap, name) && ignore.indexOf(name) === -1) {\n            if (has(internal, name)) {\n                value = internal[name];\n\n                if (has(dependencies, name)) {\n                    dependencies[name].forEach(name => this.importContext(name));\n                }\n\n                // imports 继承了 Global，但是继承的属性不分配到顶级变量中，避免占用了模板内部的变量名称\n            } else if (name === ESCAPE || name === EACH || has(imports, name)) {\n                value = `${IMPORTS}.${name}`;\n            } else {\n                value = `${DATA}.${name}`;\n            }\n\n            contextMap[name] = value;\n            context.push({\n                name,\n                value\n            });\n        }\n    }\n\n    /**\n     * 解析字符串（HTML）直接输出语句\n     * @param {Object} tplToken\n     */\n    parseString(tplToken) {\n        let source = tplToken.value;\n\n        if (!source) {\n            return;\n        }\n\n        const code = `${OUT}+=${stringify(source)}`;\n        this.scripts.push({\n            source,\n            tplToken,\n            code\n        });\n    }\n\n    /**\n     * 解析逻辑表达式语句\n     * @param {Object} tplToken\n     */\n    parseExpression(tplToken) {\n        const source = tplToken.value;\n        const script = tplToken.script;\n        const output = script.output;\n        const escape = this.options.escape;\n        let code = script.code;\n\n        if (output) {\n            if (escape === false || output === tplTokenizer.TYPE_RAW) {\n                code = `${OUT}+=${script.code}`;\n            } else {\n                code = `${OUT}+=${ESCAPE}(${script.code})`;\n            }\n        }\n\n        const esToken = this.getEsTokens(code);\n        this.getVariables(esToken).forEach(name => this.importContext(name));\n\n        this.scripts.push({\n            source,\n            tplToken,\n            code\n        });\n    }\n\n    /**\n     * 检查解析后的模板语句是否存在语法错误\n     * @param  {string} script\n     * @return {boolean}\n     */\n    checkExpression(script) {\n        // 没有闭合的块级模板语句规则\n        // 基于正则规则来补全语法不能保证 100% 准确，\n        // 但是在绝大多数情况下足以满足辅助开发调试的需要\n        const rules = [\n            // <% } %>\n            // <% }else{ %>\n            // <% }else if(a){ %>\n            [/^\\s*}[\\w\\W]*?{?[\\s;]*$/, ''],\n\n            // <% fn(c,function(a,b){ %>\n            // <% fn(c, a=>{ %>\n            // <% fn(c,(a,b)=>{ %>\n            [/(^[\\w\\W]*?\\([\\w\\W]*?(?:=>|\\([\\w\\W]*?\\))\\s*{[\\s;]*$)/, '$1})'],\n\n            // <% if(a){ %>\n            // <% for(var i in d){ %>\n            [/(^[\\w\\W]*?\\([\\w\\W]*?\\)\\s*{[\\s;]*$)/, '$1}']\n        ];\n\n        let index = 0;\n        while (index < rules.length) {\n            if (rules[index][0].test(script)) {\n                script = script.replace(...rules[index]);\n                break;\n            }\n            index++;\n        }\n\n        try {\n            new Function(script);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * 编译\n     * @return  {function}\n     */\n    build() {\n        const options = this.options;\n        const context = this.context;\n        const scripts = this.scripts;\n        const stacks = this.stacks;\n        const source = this.source;\n        const filename = options.filename;\n        const imports = options.imports;\n        const mappings = [];\n        const extendMode = has(this.CONTEXT_MAP, EXTEND);\n\n        let offsetLine = 0;\n\n        // Create SourceMap: mapping\n        const mapping = (code, { line, start }) => {\n            const node = {\n                generated: {\n                    line: stacks.length + offsetLine + 1,\n                    column: 1\n                },\n                original: {\n                    line: line + 1,\n                    column: start + 1\n                }\n            };\n\n            offsetLine += code.split(/\\n/).length - 1;\n            return node;\n        };\n\n        // Trim code\n        const trim = code => {\n            return code.replace(/^[\\t ]+|[\\t ]$/g, '');\n        };\n\n        stacks.push(`function(${DATA}){`);\n        stacks.push(`'use strict'`);\n        stacks.push(`${DATA}=${DATA}||{}`);\n        stacks.push(`var ` + context.map(({ name, value }) => `${name}=${value}`).join(`,`));\n\n        if (options.compileDebug) {\n            stacks.push(`try{`);\n\n            scripts.forEach(script => {\n                if (script.tplToken.type === tplTokenizer.TYPE_EXPRESSION) {\n                    stacks.push(\n                        `${LINE}=[${[script.tplToken.line, script.tplToken.start].join(',')}]`\n                    );\n                }\n\n                mappings.push(mapping(script.code, script.tplToken));\n                stacks.push(trim(script.code));\n            });\n\n            stacks.push(`}catch(error){`);\n\n            stacks.push(\n                'throw {' +\n                    [\n                        `name:'RuntimeError'`,\n                        `path:${stringify(filename)}`,\n                        `message:error.message`,\n                        `line:${LINE}[0]+1`,\n                        `column:${LINE}[1]+1`,\n                        `source:${stringify(source)}`,\n                        `stack:error.stack`\n                    ].join(`,`) +\n                    '}'\n            );\n\n            stacks.push(`}`);\n        } else {\n            scripts.forEach(script => {\n                mappings.push(mapping(script.code, script.tplToken));\n                stacks.push(trim(script.code));\n            });\n        }\n\n        if (extendMode) {\n            stacks.push(`${OUT}=''`);\n            stacks.push(`${INCLUDE}(${FROM},${DATA},${BLOCKS})`);\n        }\n\n        stacks.push(`return ${OUT}`);\n        stacks.push(`}`);\n\n        const renderCode = stacks.join(`\\n`);\n\n        try {\n            const result = new Function(IMPORTS, OPTIONS, `return ${renderCode}`)(imports, options);\n            result.mappings = mappings;\n            result.sourcesContent = [source];\n            return result;\n        } catch (error) {\n            let index = 0;\n            let line = 0;\n            let start = 0;\n            let generated;\n\n            while (index < scripts.length) {\n                const current = scripts[index];\n                if (!this.checkExpression(current.code)) {\n                    line = current.tplToken.line;\n                    start = current.tplToken.start;\n                    generated = current.code;\n                    break;\n                }\n                index++;\n            }\n\n            throw {\n                name: `CompileError`,\n                path: filename,\n                message: error.message,\n                line: line + 1,\n                column: start + 1,\n                source,\n                generated,\n                stack: error.stack\n            };\n        }\n    }\n}\n\n/**\n * 模板内置常量\n */\nCompiler.CONSTS = {\n    DATA,\n    IMPORTS,\n    PRINT,\n    INCLUDE,\n    EXTEND,\n    BLOCK,\n    OPTIONS,\n    OUT,\n    LINE,\n    BLOCKS,\n    SLICE,\n    FROM,\n    ESCAPE,\n    EACH\n};\n\nmodule.exports = Compiler;\n"]}
{"version":3,"sources":["../../src/compile/error.js"],"names":["TemplateError","options","message","name","formatMessage","Error","captureStackTrace","constructor","source","path","line","column","generated","lines","split","start","Math","max","end","min","length","context","slice","map","code","index","number","left","join","module","exports"],"mappings":";;;;;;;;AAAA;;;;IAIMA,a;;;AACF,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA,kIACXA,QAAQC,OADG;;AAEjB,cAAKC,IAAL,GAAY,eAAZ;AACA,cAAKD,OAAL,GAAeE,cAAcH,OAAd,CAAf;AACA,YAAII,MAAMC,iBAAV,EAA6B;AACzBD,kBAAMC,iBAAN,QAA8B,MAAKC,WAAnC;AACH;AANgB;AAOpB;;;EARuBF,K;;AAW5B,SAASD,aAAT,OAAiF;AAAA,QAAxDD,IAAwD,QAAxDA,IAAwD;AAAA,QAAlDK,MAAkD,QAAlDA,MAAkD;AAAA,QAA1CC,IAA0C,QAA1CA,IAA0C;AAAA,QAApCC,IAAoC,QAApCA,IAAoC;AAAA,QAA9BC,MAA8B,QAA9BA,MAA8B;AAAA,QAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,QAAXV,OAAW,QAAXA,OAAW;;AAC7E,QAAI,CAACM,MAAL,EAAa;AACT,eAAON,OAAP;AACH;;AAED,QAAMW,QAAQL,OAAOM,KAAP,CAAa,IAAb,CAAd;AACA,QAAMC,QAAQC,KAAKC,GAAL,CAASP,OAAO,CAAhB,EAAmB,CAAnB,CAAd;AACA,QAAMQ,MAAMF,KAAKG,GAAL,CAASN,MAAMO,MAAf,EAAuBV,OAAO,CAA9B,CAAZ;;AAEA;AACA,QAAMW,UAAUR,MACXS,KADW,CACLP,KADK,EACEG,GADF,EAEXK,GAFW,CAEP,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAClB,YAAMC,SAASD,QAAQV,KAAR,GAAgB,CAA/B;AACA,YAAMY,OAAOD,WAAWhB,IAAX,GAAkB,MAAlB,GAA2B,MAAxC;AACA,oBAAUiB,IAAV,GAAiBD,MAAjB,UAA4BF,IAA5B;AACH,KANW,EAOXI,IAPW,CAON,IAPM,CAAhB;;AASA;AACA,WACI,CAAGnB,QAAQ,WAAX,UAA0BC,IAA1B,SAAkCC,MAAlC,WACGU,OADH,cAEGlB,IAFH,UAEYD,OAFZ,KAGCU,iCAA+BA,SAA/B,GAA6C,EAH9C,CADJ;AAMH;;AAEDiB,OAAOC,OAAP,GAAiB9B,aAAjB","file":"error.js","sourcesContent":["/**\n * 模板错误处理类\n * @param   {Object}    options\n */\nclass TemplateError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.name = 'TemplateError';\n        this.message = formatMessage(options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n\nfunction formatMessage({ name, source, path, line, column, generated, message }) {\n    if (!source) {\n        return message;\n    }\n\n    const lines = source.split(/\\n/);\n    const start = Math.max(line - 3, 0);\n    const end = Math.min(lines.length, line + 3);\n\n    // Error context\n    const context = lines\n        .slice(start, end)\n        .map((code, index) => {\n            const number = index + start + 1;\n            const left = number === line ? ' >> ' : '    ';\n            return `${left}${number}| ${code}`;\n        })\n        .join('\\n');\n\n    // Alter exception message\n    return (\n        `${path || 'anonymous'}:${line}:${column}\\n` +\n        `${context}\\n\\n` +\n        `${name}: ${message}` +\n        (generated ? `\\n   generated: ${generated}` : '')\n    );\n}\n\nmodule.exports = TemplateError;\n"]}
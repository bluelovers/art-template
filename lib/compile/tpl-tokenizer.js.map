{"version":3,"sources":["../../src/compile/tpl-tokenizer.js"],"names":["TYPE_STRING","TYPE_EXPRESSION","TYPE_RAW","TYPE_ESCAPE","wrapString","token","value","String","line","start","end","Token","type","prevToken","script","split","length","lastIndexOf","tplTokenizer","source","rules","context","tokens","i","rule","flags","test","ignoreCase","regexp","RegExp","match","index","substitute","exec","slice","push","use","apply","splice","module","exports"],"mappings":"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","file":"tpl-tokenizer.js","sourcesContent":["const TYPE_STRING = 'string';\nconst TYPE_EXPRESSION = 'expression';\nconst TYPE_RAW = 'raw';\nconst TYPE_ESCAPE = 'escape';\n\nfunction wrapString(token) {\n    const value = new String(token.value);\n    value.line = token.line;\n    value.start = token.start;\n    value.end = token.end;\n    return value;\n}\n\nfunction Token(type, value, prevToken) {\n    this.type = type;\n    this.value = value;\n    this.script = null;\n\n    if (prevToken) {\n        this.line = prevToken.line + prevToken.value.split(/\\n/).length - 1;\n        if (this.line === prevToken.line) {\n            this.start = prevToken.end;\n        } else {\n            this.start = prevToken.value.length - prevToken.value.lastIndexOf('\\n') - 1;\n        }\n    } else {\n        this.line = 0;\n        this.start = 0;\n    }\n\n    this.end = this.start + this.value.length;\n}\n\n/**\n * 将模板转换为 Tokens\n * @param {string}      source\n * @param {Object[]}    rules     @see defaults.rules\n * @param {Object}      context\n * @return {Object[]}\n */\nconst tplTokenizer = (source, rules, context = {}) => {\n    const tokens = [new Token(TYPE_STRING, source)];\n\n    for (let i = 0; i < rules.length; i++) {\n        const rule = rules[i];\n        const flags = rule.test.ignoreCase ? `ig` : `g`;\n        const regexp = new RegExp(rule.test.source, flags);\n\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            let prevToken = tokens[i - 1];\n\n            if (token.type !== TYPE_STRING) {\n                continue;\n            }\n\n            let match,\n                index = 0;\n            const substitute = [];\n            const value = token.value;\n\n            while ((match = regexp.exec(value)) !== null) {\n                if (match.index > index) {\n                    prevToken = new Token(TYPE_STRING, value.slice(index, match.index), prevToken);\n                    substitute.push(prevToken);\n                }\n\n                prevToken = new Token(TYPE_EXPRESSION, match[0], prevToken);\n                match[0] = wrapString(prevToken);\n                prevToken.script = rule.use.apply(context, match);\n                substitute.push(prevToken);\n\n                index = match.index + match[0].length;\n            }\n\n            if (index < value.length) {\n                prevToken = new Token(TYPE_STRING, value.slice(index), prevToken);\n                substitute.push(prevToken);\n            }\n\n            tokens.splice(i, 1, ...substitute);\n            i += substitute.length - 1;\n        }\n    }\n\n    return tokens;\n};\n\ntplTokenizer.TYPE_STRING = TYPE_STRING;\ntplTokenizer.TYPE_EXPRESSION = TYPE_EXPRESSION;\ntplTokenizer.TYPE_RAW = TYPE_RAW;\ntplTokenizer.TYPE_ESCAPE = TYPE_ESCAPE;\n\nmodule.exports = tplTokenizer;\n"]}